# Generated by Django 5.1.3 on 2025-04-08 16:02

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(help_text='Укажите уровень опыта работы, например, Junior, Middle, Senior.', max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Опыт работы',
                'verbose_name_plural': 'Опыт работы',
                'db_table': 'experience',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('title', models.CharField(help_text='Название специализации, например, Python, Frontend, Backend.', max_length=100, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
                'db_table': 'specialization',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'Пользователь'), ('mentor', 'Ментор'), ('admin', 'Админ')], default='user', help_text='Выберите роль пользователя: обычный пользователь, ментор или администратор.', max_length=20, verbose_name='Роль')),
                ('phone', models.CharField(blank=True, help_text='Введите номер телефона в формате +7 (XXX) XXX-XX-XX (опционально).', max_length=20, null=True, verbose_name='Телефон')),
                ('is_blocked', models.BooleanField(default=False, help_text='Если включено, пользователь не сможет войти в систему.', verbose_name='Заблокирован')),
                ('first_name', models.CharField(blank=True, help_text='Введите имя пользователя', max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, help_text='Введите фамилию пользователя', max_length=150, verbose_name='Фамилия')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='MentorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Рейтинг ментора от 0.00 до 5.00.', max_digits=3, verbose_name='Рейтинг')),
                ('reviews_count', models.PositiveIntegerField(default=0, help_text='Количество оставленных отзывов.', verbose_name='Количество отзывов')),
                ('experience', models.ForeignKey(help_text='Выберите уровень опыта работы ментора.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.experience', verbose_name='Опыт работы')),
                ('user', models.OneToOneField(help_text='Связанный пользователь с ролью ментор.', limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor_profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('specialization', models.ForeignKey(help_text='Выберите специализацию ментора из списка.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.specialization', verbose_name='Специализация')),
            ],
            options={
                'verbose_name': 'Профиль ментора',
                'verbose_name_plural': 'Профили менторов',
            },
        ),
    ]
